# Dev Editor Requirements

It is fair to say that most serious code editors now offer similar
functionality in terms of macros, search/replace, highlighting and
text manipulation. But generic text editing is no longer enough when
editing source code of large and complex software systems written
primarily by others.

I have some basic requirements for my editor - specific to the
language - when writing code and I try to bind such features to the
same keys across languages. The availability of such support may even
affect my tolerance to undertake a serious project in a given
language: it boils down to the editor having access to an AST of the
entire project.

Together with my preferred keybindings for the language-dependent
features:

* source of symbol at point (m-. with backout on m-,)
* autocompletion of partial symbol at point (TAB)
* feedback about syntax errors/warnings (red squigglies)
* suggestions to import namespaces of undefined symbols (s-RET)
* documentation of symbol at point (s-q)
* type of / describe symbol at point (s-i)
* (object oriented) browse type hierarchy (s-t)
* rename/refactor symbol (s-r)

Inspections and hints are also highly desirable, especially in
boilerplate-laden languages such as C, C++ and Java.


# Languages

# Scala

Much of the above is provided by the ENSIME project, which interfaces
with the Scala Presentation Compiler to generate an AST of the Scala
source code. Import suggestions and autocompletion of classes and
methods is also available for binaries, which includes Java
dependencies. HTML documentation can also be easily linked to symbols,
if it is available (Scala and Java documentation is in-line so this is
rarely beneficial).

1. documentation of symbol at point (s-q)
2. source of symbol at point (m-. with backout on m-,)
3. autocompletion of partial symbol at point (TAB)
4. feedback about syntax errors/warnings (red squigglies)
5. suggestions to import namespaces of undefined symbols (s-RET)
6. type of / describe symbol at point (s-i)
7. (object oriented) browse type hierarchy (s-t)
8. rename/refactor symbol (s-r)


# Java

Sadly, Java is not really supported in Emacs even though the compiler
itself produces an AST which is used extensively by Netbeans. IntelliJ
and Eclipse have developed their own AST parser.

Java development often goes hand-in-hand with Spring and a good Java
editor would also be able to extend autocompletion and source of
symbol features to include spring configuration files.

IntelliJ is by far the most superior Java / Spring editing solution.

# R

# Python


# Elisp



# Haskell

